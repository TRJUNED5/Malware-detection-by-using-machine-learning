# -*- coding: utf-8 -*-
"""Malware_Detection_Team_Matrix_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IBTFrJBfRo7HyG659pFah2J_bdf95imw

***Importing Libraires***
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

malData=pd.read_csv("/content/MalwareData.csv", sep="|", low_memory=True)

malData.head()

malData.shape

malData.describe()

legit = malData[0:41323].drop(['legitimate'], axis=1)
mal = malData[41323::].drop(['legitimate'], axis=1)
print("The shape of the legit dataset is: %s samples, %s features" %(legit.shape[0], legit.shape[0]))
print("The shape of the mal dataset is: %s samples, %s features" %(mal.shape[0], mal.shape[0]))

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()

"""***Data Cleaning***"""

y = malData['legitimate']
malData = malData.drop(['legitimate'], axis=1)

malData = malData.drop(['Name'], axis=1)
malData = malData.drop(['md5'], axis=1)
print("The Name and md5 varibles are removed successfully ")

"""***Spliting the Dataset into Test and Train***"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(malData, y, test_size=0.2, random_state=42)
x_train.shape

"""***Model Building***

***1. Random Forest***
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
clf = RandomForestClassifier(max_leaf_nodes=2, random_state=0)
randomModel = clf.fit(x_train, y_train)

"""***Random forest Evaluation on test data***"""

from sklearn.metrics import f1_score, accuracy_score, plot_confusion_matrix, auc, confusion_matrix

train_pred = randomModel.predict(x_train)
accuracy_score(y_train, train_pred)

prediction = randomModel.predict(x_test)
accuracy_score(y_test, prediction)

f1_score(y_test, prediction)

"""***Confusion Matrix***"""

from locale import normalize
titles_options = [("Confusion matrix, without normalization", None),
                  ("Normalized confusion matrix", "true")]
for title, normalize in titles_options:
  disp = plot_confusion_matrix(randomModel, x_test, y_test,
                               display_labels = "legitimate",
                               cmap=plt.cm.Blues, normalize=normalize)
  disp.ax_.set_title(title)
  print(title)
  print(disp.confusion_matrix)

  plt.show()

"""***2. Logistic Regression***"""

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0)
logModel=clf.fit(x_train, y_train)

"""Model Evaluation"""

train_log = logModel.predict(x_train)
accuracy_score(y_train, train_log)

pred = logModel.predict(x_test)
accuracy_score(y_test, pred)

f1_score(y_test, pred)

"""***Confusion Matrix***"""

titles_options = [("Confusion matrix, without normalization", None),
                  ("Normalized confusion matrix", "true")]
for title, normalize in titles_options:
  disp = plot_confusion_matrix(logModel, x_test, y_test,
                               display_labels = "legitimate",
                               cmap=plt.cm.Blues, normalize=normalize)
  disp.ax_.set_title(title)
  print(title)
  print(disp.confusion_matrix)

  plt.show()

"""***3. Neural Network***"""

import tensorflow as tr
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(16, input_dim = 54, activation="relu"))
model.add(Dense(8, activation="relu"))
model.add(Dense(4, activation="relu"))
model.add(Dense(1, activation="sigmoid"))
model.summary()

model.compile(loss = "binary_crossentropy", optimizer="rmsprop", metrics=["accuracy"])

model.fit(x_train, y_train, epochs=5, batch_size=32)

"""***Model Evaluation***"""

trainPred = model.predict(x_train)
trainPred = [1 if y >= 0.5 else 0 for y in trainPred]
accuracy_score(y_train, trainPred)

y_prediction = model.predict(x_test)
y_prediction = [1 if y >= 0.5 else 0 for y in y_prediction]
accuracy_score(y_test, y_prediction)

confusion_matrix(y_test, y_prediction)

f1_score(y_test, y_prediction)